{
    "name": "FSCM",
    "image": "mcr.microsoft.com/devcontainers/python:3.12-bookworm",
    "remoteUser": "vscode",
    "mounts": [
        // Mount local resources : initializeCommand.sh will create them if necessary
        "source=${localEnv:HOME}${localEnv:USERPROFILE}/.azure,target=/home/vscode/.azure,type=bind,consistency=cached",
        "source=${localEnv:HOME}${localEnv:USERPROFILE}/.aws,target=/home/vscode/.aws,type=bind,consistency=cached",
        "source=${localEnv:HOME}${localEnv:USERPROFILE}/.dbt,target=/home/vscode/.dbt,type=bind,consistency=cached",
        "source=${localEnv:HOME}${localEnv:USERPROFILE}/.ssh,target=/home/vscode/.ssh,type=bind,consistency=cached",
        "source=${localEnv:HOME}${localEnv:USERPROFILE}/.gitconfig,target=/home/vscode/.gitconfig,type=bind,consistency=cached",
        "source=${localEnv:HOME}${localEnv:USERPROFILE}/.zsh_history,target=/home/vscode/.zsh_history,type=bind,consistency=cached",
        "source=${localEnv:HOME}${localEnv:USERPROFILE}/.zshrc,target=/home/vscode/.zshrc,type=bind,consistency=cached"
    ],
    "containerEnv": {
        // A set of name-value pairs that sets or overrides environment variables for the container. Environment and pre-defined
        //  variables (se https://containers.dev/implementors/json_reference/#variables-in-devcontainerjson)  may be referenced in the values.
        //  For example:
        // "containerEnv": { "MY_VARIABLE": "${localEnv:MY_VARIABLE}" }
        // If you want to reference an existing container variable while setting this one (like updating the PATH), use remoteEnv instead.
        // containerEnv will set the variable on the Docker container itself, so all processes spawned in the container will have access to it. But
        //  it will also be static for the life of the container - you must rebuild the container to update the value.
        // We recommend using containerEnv (over remoteEnv) as much as possible since it allows all processes to see the variable and isn’t client-specific.
         "TZ": "Australia/Perth"
        ,"PYTHONDONTWRITEBYTECODE": "1" // Suppress creation of the __pycache__ folders
        ,"DISABLE_UPDATE_PROMPT" : "true" // Disable oh-my-zsh auto update prompt
    },
    "remoteEnv": {
        //	A set of name-value pairs that sets or overrides environment variables for the devcontainer.json supporting service / tool (or sub-processes like terminals)
        //   but not the container as a whole. Environment and pre-defined variables may be referenced in the values.
        // You may want to use remoteEnv (over containerEnv) if the value isn’t static since you can update its value without having to rebuild the full container.
        //  behaviour of code in generator module
        "FSCM_MAP_FILENAME": "FSCM_database_mapping.xlsx"
       ,"FSCM_DEBUG_JSON": "1"
    },

    // initializeCommand
    // 	A command string or list of command arguments to run on the host machine during initialization, including during container creation and on subsequent starts. The command may run more than once during a given session.
    //     ⚠️ The command is run wherever the source code is located on the host. For cloud services, this is in the cloud.
    //
    // onCreateCommand
    // 	This command is the first of three (along with updateContentCommand and postCreateCommand) that finalizes container setup when a dev container is created. It and subsequent commands execute inside the container immediately after it has started for the first time.
    //     Cloud services can use this command when caching or prebuilding a container. This means that it will not typically have access to user-scoped assets or secrets.
    //
    // updateContentCommand
    //     This command is the second of three that finalizes container setup when a dev container is created. It executes inside the container after onCreateCommand whenever new content is available in the source tree during the creation process.
    //     It will execute at least once, but cloud services will also periodically execute the command to refresh cached or prebuilt containers. Like cloud services using onCreateCommand, it can only take advantage of repository and org scoped secrets or permissions.
    //
    // postCreateCommand
    //     This command is the last of three that finalizes container setup when a dev container is created. It happens after updateContentCommand and once the dev container has been assigned to a user for the first time.
    //     Cloud services can use this command to take advantage of user specific secrets and permissions.
    //
    // postStartCommand
    //     A command to run each time the container is successfully started.
    //
    // postAttachCommand
    //     A command to run each time a tool has successfully attached to the container.

    "initializeCommand": ".devcontainer/initializeCommand.sh",
    "onCreateCommand": ".devcontainer/onCreateCommand.sh",
    "updateContentCommand": ".devcontainer/updateContentCommand.sh",
    "postCreateCommand": ".devcontainer/postCreateCommand.sh",
    "postStartCommand": ".devcontainer/postStartCommand.sh",
    "postAttachCommand": ".devcontainer/postAttachCommand.sh",
    "customizations": {
        "vscode": {
            "extensions": [
                "ms-python.python",
                "ms-python.black-formatter",
                "njpwerner.autodocstring",
                // "innoverio.vscode-dbt-power-user",
                // "bastienboutonnet.vscode-dbt",
                // "henriblancke.vscode-dbt-formatter",
                // "duckdive.dbtdocs",
                "zaaack.markdown-editor",
                "yzhang.markdown-all-in-one",
                "sbierner.github-markdown-preview",
                "davidanson.vscode-markdownlint",
                "vscode.json-language-features",
                "redhat.vscode-yaml",
                "mhutchie.git-graph",
                "donjayamanne.githistory",
                "ms-vscode.azure-repos",
                "shardulm94.trailing-spaces",
                "GitHub.remotehub",
                "ms-vscode.remote-repositories",
                "ms-vscode.azure-account",
                "ms-azuretools.vscode-azureresourcegroups",
                // "databricks.databricks",
                "PascalReitermann93.vscode-yaml-sort"
            ],
            "settings": {
                "[json]": {
                    "editor.defaultFormatter": "vscode.json-language-features"
                },
                "[python]": {
                    "editor.defaultFormatter": "ms-python.black-formatter",
                    "editor.formatOnSave": true
                },
                "[yaml]": {
                    "editor.defaultFormatter": "redhat.vscode-yaml"
                },
                "black-formatter.interpreter": ["/usr/local/bin/python"],
                "black-formatter.path": ["/usr/local/py-utils/bin/black"],
                "dbt.enableNewLineagePanel": true,
                "dbtDocs.dbtProjectYAMLPaths": ["${containerWorkspaceFolder}/dbt_project.yml"],
                "editor.detectIndentation": false,
                "editor.formatOnSave": false,
                "editor.insertSpaces": true,
                "editor.tabSize": 4,
                "files.associations": {
                    "${containerWorkspaceFolder}/**/*.yaml": "jinja-yaml",
                    "${containerWorkspaceFolder}/**/*.yml": "jinja-yaml",
                    "${containerWorkspaceFolder}/**/*.sql": "jinja-sql",
                    "${containerWorkspaceFolder}/**/docs/**/*.md": "jinja-md"
                },
                "files.trimTrailingWhitespace": true,
                "python.defaultInterpreterPath": "/usr/local/bin/python",
                "python.formatting.blackPath": "/usr/local/py-utils/bin/black",
                "python.formatting.provider": "black",
                "python.showStartPage": false,
                "python.testing.pytestEnabled": true,
                "python.testing.pytestPath": "/usr/local/py-utils/bin/pytest"
            }
        }
    }
}